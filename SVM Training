SVM training
from sklearn import svm
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix
from skimage import feature
from imutils import paths
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import cv2
import os
import pickle


basepath= os.path.normpath('D:/100%code')

def fd_hu_moments(image):
    
    feature = cv2.HuMoments(cv2.moments(image)).flatten()
    return feature

def quantify_image(image):
  
    features = feature.hog(image, orientations=9,
        pixels_per_cell=(10, 10), cells_per_block=(2, 2),
        transform_sqrt=True, block_norm="L1")

    # return the feature vector
    return features

def load_split(path):
    
    path=trainingPath
    imagePaths = list(paths.list_images(path))
    data = []
    labels = []

  
    for imagePath in imagePaths:
      
        label = imagePath.split(os.path.sep)[-2]
#        print(imagePath)
        
        image = cv2.imread(imagePath)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        image = cv2.resize(image, (64, 64))

    
        image = cv2.threshold(image, 0, 255,
            cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

        # quantify the image
        features1 = quantify_image(image)
        features2 = fd_hu_moments(image)
        global_feature = np.hstack([features1,features2])

      
        data.append(global_feature)
        
        labels.append(label)

   
    return (np.array(data), np.array(labels))


trainingPath = os.path.sep.join([basepath, "training_set"])
testingPath = os.path.sep.join([basepath, "testing_set"])



(trainX, trainY) = load_split(trainingPath)
(testX, testY) = load_split(testingPath)


le = LabelEncoder()
trainY = le.fit_transform(trainY)
testY = le.transform(testY)


trials = {}

def SVM_Cl():
    
    C = 1.0    
    model = svm.SVC(kernel='linear',C=C)
    

    for i in range(0, 5): 
        
        # train the model
        print("[INFO] training model {} of {}...".format(i + 1,
            5))  #args["trials"]))
        model = svm.SVC(kernel='linear',C=C)
    
        model.fit(trainX, trainY) 
    
        
        predictions = model.predict(testX)
        metrics = {}
       
        
    
    
    
    with open(basepath + '/clf_SVM.pkl', 'wb') as f:
            pickle.dump(model, f)
            
    A="SVM Accuracy: {0:.2%}".format(accuracy_score(predictions, testY))
    C="SVM Model Saved as <<  clf_SVM.pkl  >>"
    
    D = A+'\n'+ C
    print(D)
    return D 
#SVM_Cl() 
