CNN_MODEL
def main():
    
    import tensorflow as tf
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
    from tensorflow.keras.optimizers import SGD
    from tensorflow.keras.preprocessing.image import ImageDataGenerator
    import os
    import numpy as np
    from keras.models import Sequential
    from keras.layers import Convolution2D
    from keras.layers import MaxPooling2D
    from keras.layers import Flatten
    from keras.layers import Dense, Dropout
    from tensorflow.keras import optimizers
    from tensorflow.keras.optimizers import SGD
    
    
    basepath = "C:/Users/Soham Devikar/Desktop/project module/soham/Brain hamorage 100%code/Brain hamorage/Brain hamorage"
    train_path = os.path.join(basepath, "training_set")
    test_path = os.path.join(basepath, "testing_set")
    
   
    IMG_SIZE = (224, 224)
    BATCH_SIZE = 32
    
 
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True
    )
    
    test_datagen = ImageDataGenerator(rescale=1./255)
    
    
    training_set = train_datagen.flow_from_directory(
        train_path,
        target_size=IMG_SIZE,
        batch_size=BATCH_SIZE,
        class_mode='categorical'
    )
    
    test_set = test_datagen.flow_from_directory(
        test_path,
        target_size=IMG_SIZE,
        batch_size=BATCH_SIZE,
        class_mode='categorical'
    )
    
   
    classifier = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)),
        MaxPooling2D(pool_size=(2,2)),
        
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D(pool_size=(2,2)),
        
        Conv2D(128, (3,3), activation='relu'),
        MaxPooling2D(pool_size=(2,2)),
        
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(2, activation='softmax')  
    ])
    
   
    classifier.compile(
        optimizer=SGD(learning_rate=0.01, momentum=0.9),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    

    classifier.fit(
        training_set,
        epochs=50,
        validation_data=test_set
    )
    
    
    classifier.save("brain_hemorrhage_model.h5")
    
    scores = classifier.evaluate(test_set, verbose=1)
    B="Testing Accuracy: %.2f%%" % (scores[1]*100)
    print(B)
    scores =  classifier.evaluate(training_set, verbose=1)
    C="Training Accuracy: %.2f%%" % (scores[1]*100)
    print(C)
    
        
    msg=B+'\n'+ C 
