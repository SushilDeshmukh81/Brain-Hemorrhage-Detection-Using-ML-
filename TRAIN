TRAIN 
import nltk
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import json
import pickle
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras.optimizers import SGD

import random

words=[]
classes = []
documents = []
ignore_words = ['?', '!']
data_file = open(r'intents5.json').read()
intents = json.loads(data_file)


for intent in intents['intents']:
    for pattern in intent['patterns']:

      
        w = nltk.word_tokenize(pattern)
        words.extend(w)
    
        documents.append((w, intent['tag']))

       
        if intent['tag'] not in classes:
            classes.append(intent['tag'])


words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))

classes = sorted(list(set(classes)))

print (len(documents), "documents")

print (len(classes), "classes", classes)

print (len(words), "unique lemmatized words", words)


pickle.dump(words,open('WORDS.pkl','wb'))
pickle.dump(classes,open('CLASSES.pkl','wb'))

# Create training data
training = []
output_empty = [0] * len(classes) 

for doc in documents:
    bag = [0] * len(words)  
    pattern_words = doc[0]
    
   
    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]
    
    
    for i, w in enumerate(words):
        if w in pattern_words:
            bag[i] = 1  
    
    
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1  
    
    training.append([bag, output_row])


print(len(training[0][0]))  
print(len(training[0][1]))  


random.shuffle(training)


training = np.array(training)


train_x = np.array([item[0] for item in training])  # Features (bag of words)
train_y = np.array([item[1] for item in training])  # Labels (one-hot encoded)



from keras.optimizers import SGD


model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))


optimizer = SGD(learning_rate=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

l
hist = model.fit(np.array(train_x), np.array(train_y), epochs=500, batch_size=5, verbose=1)
model.save('TRIAL_MODEL.h5')


print("model created")
